// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("mongoUrl")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model UserInfo {
  id           String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  username     String?
  userImageUrl String?
  userId       String?
  email        String?  @unique
  alias        String?
  // posts        Post[]   @relation("posts")
  // watching     Post[]   @relation("watching")
  // incomings    Conversation[] @relation("incoming")
  // outgoings    Conversation[] @relation("outgoing")
  // postId       String?
  createdAt    DateTime @default(now())
}

// model Post {
//   id         String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
//   title      String?
//   content    String?
//   category   String?
//   make       String?
//   model      String?
//   username String
//   userId String
//   userImageUrl String
//   year       Int?      @default(1000)
//   views      Int?      @default(0)
//   // comments     Comment[]
//   userInfoId String?   @db.ObjectId
//   watchingId String?   @db.ObjectId
//   userInfo   UserInfo? @relation("posts", fields: [userInfoId], references: [id])
//   watchers   UserInfo? @relation("watching", fields: [watchingId], references: [id])
//   // Conversation Conversation[]
//   createdAt  DateTime  @default(now())
// }


// model Messages {
//   id             String        @id @default(dbgenerated()) @map("_id") @db.ObjectId
//   content        String?
//   sender         String?
//   Conversation   Conversation? @relation(fields: [conversationId], references: [id])
//   conversationId String?       @db.ObjectId
//   createdAt      DateTime      @default(now())

// }

// model Comment {
//   id           String        @id @default(dbgenerated()) @map("_id") @db.ObjectId
//   content      String?
//   isOffer      Boolean       @default(false)
//   postId       String?       @db.ObjectId
//   title        String?
//   userId       String?       @db.ObjectId
//   userImageUrl String?
//   username     String?
//   Post         Post?         @relation(fields: [postId], references: [id])
//   Conversation Conversation?
//   createdAt    DateTime      @default(now())

// }

// model Conversation {

//   id         String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
//   locked     Boolean    @default(false)
//   userInfoId String?
//   comment    Comment?   @relation(fields: [commentId], references: [id])
//   post       Post?      @relation(fields: [postId], references: [id])
//   messages   Messages[]
//   commentId  String?    @db.ObjectId
//   postId     String?    @db.ObjectId
//   createdAt  DateTime   @default(now())
//   senderId   String     @db.ObjectId
//   recieverId String     @db.ObjectId
//   newMessage String?
//   reciever   UserInfo   @relation("incoming", fields: [recieverId], references: [id])
//   sender     UserInfo   @relation("outgoing", fields: [senderId], references: [id])
// }
